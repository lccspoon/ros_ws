# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from traversability_msgs/CheckFootprintPathRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg
import traversability_msgs.msg

class CheckFootprintPathRequest(genpy.Message):
  _md5sum = "715ac8adb4922a1589b635a04ab24fb2"
  _type = "traversability_msgs/CheckFootprintPathRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Footprint path to check.
traversability_msgs/FootprintPath[] path


================================================================================
MSG: traversability_msgs/FootprintPath
# Path of the footprint defined as array of connected poses.
# Poses are connected piece-wise linear in the order of the array.
geometry_msgs/PoseArray poses

# Either: Define footprint radius.
float64 radius 

# Or: Define footprint as polygon in the robot base frame.
# Polygon is used if it is defined, otherwise radius is used.
geometry_msgs/PolygonStamped footprint

# Use conservative footprint. Only available if polygon is used.
bool conservative

# Compute untraversable polygon in the checked area for traversability. If true, computation demand is higher.
bool compute_untraversable_polygon

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PolygonStamped
# This represents a Polygon with reference coordinate frame and timestamp
Header header
Polygon polygon

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['path']
  _slot_types = ['traversability_msgs/FootprintPath[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckFootprintPathRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = []
    else:
      self.path = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _v1 = val1.poses
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.poses:
          _v4 = val3.position
          _x = _v4
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v5 = val3.orientation
          _x = _v5
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
        _v6 = val1.footprint
        _v7 = _v6.header
        _x = _v7.seq
        buff.write(_get_struct_I().pack(_x))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v9 = _v6.polygon
        length = len(_v9.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v9.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.conservative, _x.compute_untraversable_polygon))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = traversability_msgs.msg.FootprintPath()
        _v10 = val1.poses
        _v11 = _v10.header
        start = end
        end += 4
        (_v11.seq,) = _get_struct_I().unpack(str[start:end])
        _v12 = _v11.stamp
        _x = _v12
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v11.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v10.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v13 = val3.position
          _x = _v13
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v14 = val3.orientation
          _x = _v14
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v10.poses.append(val3)
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        _v15 = val1.footprint
        _v16 = _v15.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.frame_id = str[start:end]
        _v18 = _v15.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v18.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v18.points.append(val4)
        _x = val1
        start = end
        end += 2
        (_x.conservative, _x.compute_untraversable_polygon,) = _get_struct_2B().unpack(str[start:end])
        val1.conservative = bool(val1.conservative)
        val1.compute_untraversable_polygon = bool(val1.compute_untraversable_polygon)
        self.path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.path)
      buff.write(_struct_I.pack(length))
      for val1 in self.path:
        _v19 = val1.poses
        _v20 = _v19.header
        _x = _v20.seq
        buff.write(_get_struct_I().pack(_x))
        _v21 = _v20.stamp
        _x = _v21
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v20.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v19.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v19.poses:
          _v22 = val3.position
          _x = _v22
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v23 = val3.orientation
          _x = _v23
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
        _v24 = val1.footprint
        _v25 = _v24.header
        _x = _v25.seq
        buff.write(_get_struct_I().pack(_x))
        _v26 = _v25.stamp
        _x = _v26
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v25.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v27 = _v24.polygon
        length = len(_v27.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v27.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.conservative, _x.compute_untraversable_polygon))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path is None:
        self.path = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path = []
      for i in range(0, length):
        val1 = traversability_msgs.msg.FootprintPath()
        _v28 = val1.poses
        _v29 = _v28.header
        start = end
        end += 4
        (_v29.seq,) = _get_struct_I().unpack(str[start:end])
        _v30 = _v29.stamp
        _x = _v30
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v29.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v29.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v28.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v31 = val3.position
          _x = _v31
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v32 = val3.orientation
          _x = _v32
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v28.poses.append(val3)
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        _v33 = val1.footprint
        _v34 = _v33.header
        start = end
        end += 4
        (_v34.seq,) = _get_struct_I().unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v34.frame_id = str[start:end]
        _v36 = _v33.polygon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v36.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v36.points.append(val4)
        _x = val1
        start = end
        end += 2
        (_x.conservative, _x.compute_untraversable_polygon,) = _get_struct_2B().unpack(str[start:end])
        val1.conservative = bool(val1.conservative)
        val1.compute_untraversable_polygon = bool(val1.compute_untraversable_polygon)
        self.path.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from traversability_msgs/CheckFootprintPathResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import traversability_msgs.msg

class CheckFootprintPathResponse(genpy.Message):
  _md5sum = "403c136f58a3e688827b9a267b872101"
  _type = "traversability_msgs/CheckFootprintPathResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# Traversability results
traversability_msgs/TraversabilityResult[] result

================================================================================
MSG: traversability_msgs/TraversabilityResult
# If path is safe to traverse.
bool is_safe

# Estimate of the traversability of the path.
# Ranges from 0 to 1 where 0 means not traversable and 1 highly traversable.
float64 traversability

# Area of the footprint path.
float64 area"""
  __slots__ = ['result']
  _slot_types = ['traversability_msgs/TraversabilityResult[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckFootprintPathResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = []
    else:
      self.result = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.result)
      buff.write(_struct_I.pack(length))
      for val1 in self.result:
        _x = val1
        buff.write(_get_struct_B2d().pack(_x.is_safe, _x.traversability, _x.area))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.result is None:
        self.result = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result = []
      for i in range(0, length):
        val1 = traversability_msgs.msg.TraversabilityResult()
        _x = val1
        start = end
        end += 17
        (_x.is_safe, _x.traversability, _x.area,) = _get_struct_B2d().unpack(str[start:end])
        val1.is_safe = bool(val1.is_safe)
        self.result.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.result)
      buff.write(_struct_I.pack(length))
      for val1 in self.result:
        _x = val1
        buff.write(_get_struct_B2d().pack(_x.is_safe, _x.traversability, _x.area))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.result is None:
        self.result = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result = []
      for i in range(0, length):
        val1 = traversability_msgs.msg.TraversabilityResult()
        _x = val1
        start = end
        end += 17
        (_x.is_safe, _x.traversability, _x.area,) = _get_struct_B2d().unpack(str[start:end])
        val1.is_safe = bool(val1.is_safe)
        self.result.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2d = None
def _get_struct_B2d():
    global _struct_B2d
    if _struct_B2d is None:
        _struct_B2d = struct.Struct("<B2d")
    return _struct_B2d
class CheckFootprintPath(object):
  _type          = 'traversability_msgs/CheckFootprintPath'
  _md5sum = 'c63bb28cc303394e26806233caf914bd'
  _request_class  = CheckFootprintPathRequest
  _response_class = CheckFootprintPathResponse
