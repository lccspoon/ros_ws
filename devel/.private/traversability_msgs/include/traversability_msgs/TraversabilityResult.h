// Generated by gencpp from file traversability_msgs/TraversabilityResult.msg
// DO NOT EDIT!


#ifndef TRAVERSABILITY_MSGS_MESSAGE_TRAVERSABILITYRESULT_H
#define TRAVERSABILITY_MSGS_MESSAGE_TRAVERSABILITYRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traversability_msgs
{
template <class ContainerAllocator>
struct TraversabilityResult_
{
  typedef TraversabilityResult_<ContainerAllocator> Type;

  TraversabilityResult_()
    : is_safe(false)
    , traversability(0.0)
    , area(0.0)  {
    }
  TraversabilityResult_(const ContainerAllocator& _alloc)
    : is_safe(false)
    , traversability(0.0)
    , area(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _is_safe_type;
  _is_safe_type is_safe;

   typedef double _traversability_type;
  _traversability_type traversability;

   typedef double _area_type;
  _area_type area;





  typedef boost::shared_ptr< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> const> ConstPtr;

}; // struct TraversabilityResult_

typedef ::traversability_msgs::TraversabilityResult_<std::allocator<void> > TraversabilityResult;

typedef boost::shared_ptr< ::traversability_msgs::TraversabilityResult > TraversabilityResultPtr;
typedef boost::shared_ptr< ::traversability_msgs::TraversabilityResult const> TraversabilityResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traversability_msgs::TraversabilityResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traversability_msgs::TraversabilityResult_<ContainerAllocator1> & lhs, const ::traversability_msgs::TraversabilityResult_<ContainerAllocator2> & rhs)
{
  return lhs.is_safe == rhs.is_safe &&
    lhs.traversability == rhs.traversability &&
    lhs.area == rhs.area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traversability_msgs::TraversabilityResult_<ContainerAllocator1> & lhs, const ::traversability_msgs::TraversabilityResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traversability_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14ffe3323c91cd823bef7a313714954e";
  }

  static const char* value(const ::traversability_msgs::TraversabilityResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14ffe3323c91cd82ULL;
  static const uint64_t static_value2 = 0x3bef7a313714954eULL;
};

template<class ContainerAllocator>
struct DataType< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traversability_msgs/TraversabilityResult";
  }

  static const char* value(const ::traversability_msgs::TraversabilityResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# If path is safe to traverse.\n"
"bool is_safe\n"
"\n"
"# Estimate of the traversability of the path.\n"
"# Ranges from 0 to 1 where 0 means not traversable and 1 highly traversable.\n"
"float64 traversability\n"
"\n"
"# Area of the footprint path.\n"
"float64 area\n"
;
  }

  static const char* value(const ::traversability_msgs::TraversabilityResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_safe);
      stream.next(m.traversability);
      stream.next(m.area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TraversabilityResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traversability_msgs::TraversabilityResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traversability_msgs::TraversabilityResult_<ContainerAllocator>& v)
  {
    s << indent << "is_safe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_safe);
    s << indent << "traversability: ";
    Printer<double>::stream(s, indent + "  ", v.traversability);
    s << indent << "area: ";
    Printer<double>::stream(s, indent + "  ", v.area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAVERSABILITY_MSGS_MESSAGE_TRAVERSABILITYRESULT_H
